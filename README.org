#+TITLE:     Jupyter: Jax
#+AUTHOR:    David Conner
#+DESCRIPTION: notes
#+PROPERTY: header-args:sh     :tangle-mode (identity #o500) :mkdirp yes :shebang #!/bin/bash

Not a poetry project.

* Docs

* Resources

* Build
** Docker

 Find it on [[hub.docker.com/r/rocm/jax-build/tags][hub.docker.com/r/rocm/jax-build/tags]]

#+header: :noweb-ref jax-build-image :noweb-sep ""
#+begin_src emacs-lisp
rocm/jax-build:rocm5.5.0-jax0.4.6.550-py3.8.0
#+end_src

Or use =rocm/tensorflow=

#+header: :noweb-ref tf-rocm-image :noweb-sep ""
#+begin_src emacs-lisp
rocm/tensorflow:latest
#+end_src


Pull the =rocm/jax-build= image. The =:latest= tag doesn't pull.

#+begin_src sh :tangle bin/dpull.jupyter.sh :noweb yes
docker pull <<tf-rocm-image>>
#+end_src

*** Jupyter

Image tag:

#+header: :noweb-ref tf-rocm :noweb-sep ""
#+begin_src emacs-lisp
tf-rocm
#+end_src

Container tag:

#+header: :noweb-ref tf-rocm-jupyter :noweb-sep ""
#+begin_src emacs-lisp
tf-rocm-jupyter
#+end_src

Dockerfile:

#+header: :tangle-mode (identity #o400)
#+begin_src dockerfile :tangle Dockerfile.jupyter :noweb yes
FROM <<tf-rocm-image>>

RUN pip3 install -U pip setuptools
RUN pip3 install jaxlib-rocm
RUN pip3 install jupyterlab pandas~=2.0.0
RUN pip3 install tensorboard
RUN pip3 install geomstats
#+end_src

Don't run this from emacs (no wonder there's no docker-build command)

#+begin_src sh :tangle bin/dbuild.sh :noweb yes
DOCKER_CONTEXT_PATH=$(pwd)
DOCKERFILE_PATH=Dockerfile.jupyter
docker build --tag <<tf-rocm>> -f $DOCKERFILE_PATH $DOCKER_CONTEXT_PATH
#+end_src

**** TODO Run WIth Docker Compose

The compose environment:

#+header: :tangle-mode (identity #o400) :mkdir yes
#+begin_src sh :tangle .env.jupyter :noweb yes
HSA_OVERRIDE_GFX_VERSION=10.3.0
#+end_src

And the docker compose:

#+begin_src yaml :tangle compose-jupyter.yml :noweb yes
version: '3'
services:
  jupyter:
    image: <<tf-rocm>>
    ports:
      - 8080:8888
    environment:
      - HSA_OVERRIDE_GFX_VERSION=${HSA_OVERRIDE_GFX_VERSION}
    volumes:
      - ${PWD}/jax:/workspace/jax
      - ${PWD}/nb:/workspace/nb
#+end_src

And the launcher script:

#+begin_src sh :tangle bin/dcomp.sh
# up -d $@ ... hmmmm....
# seems to be crashing unless ran specifically
docker compose --env-file=.env.jupyter -f compose-jupyter.yml
#+end_src

**** Run With Docker

#+begin_src sh :tangle bin/drun.sh :noweb yes
#ROCM_IMAGE=<<tf-rocm-image>>
ROCM_IMAGE=<<tf-rocm>>
docker run \
      -it \
      --network=host \
      --device=/dev/kfd \
      --device=/dev/dri/card0 \
      --device=/dev/dri/renderD128 \
      --ipc=host \
      --shm-size 16G \
      --group-add video \
      --group-add render \
      --cap-add=SYS_PTRACE \
      --security-opt seccomp=unconfined \
      -e JAX_PLATFORMS=cpu,gpu \
      -e HSA_OVERRIDE_GFX_VERSION=10.3.0 \
      -v ${PWD}/jax:/workspace/jax \
      -v ${PWD}/nb:/workspace/nb \
      $ROCM_IMAGE \
      /bin/bash
#+end_src

Dammit, finally.

#+begin_example
root@kratos:/home/jenkins/workspace/jax/releases/jax-release_jaxlib-v0.4.6-rocm55# python
Python 3.8.0 (default, May 10 2023, 04:51:38)
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import tensorflow as tf
2023-05-12 11:10:03.009878: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
>>> tf.config.list_physical_devices()
[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]
>>>
#+end_example

* External Source

** Repo

#+begin_src xml :tangle default.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <remote name="github" fetch="https://github.com"/>
  <default remote="github" sync-j="8" revision="refs/heads/master"/>
  <project name="google/jax" path="jax" revision="refs/heads/main" remote="github" />
  <project name="google/jax" path="jax046" revision="refs/tags/jaxlib-v0.4.6" remote="github" />
  <project name="ROCmSoftwarePlatform/jax" path="jaxrocm" revision="refs/tags/jaxlib-v0.4.6-rocm55" remote="github" />
  <project name="geomstats/geomstats" path="geomstats" revision="refs/heads/master" remote="github" />
</manifest>
#+end_src

Can sync with:

#+begin_src sh
export WD=$(pwd)
cd src
#repo init file://$WD/default.xml --standalone-manifest
repo init -u file://$WD -m default.xml

if [ $? -eq 0 ]; then
    repo sync
else
    echo "couldn't repo init" && exit 1
fi
#+end_src

I haven't tested =repo sync= from a single file, but the above script almost
does it. It gets =default.xml= into =src/.repo/manifests=.

Since it's pulling the manifest from a =file:///= url, then once it's
initialized, it won't update =default.xml= on sync. It could be reinitialized,
but it's easier just to =cp ../default.xml .repo/manifests/default.xml= when a
new release occurs.

After updating the manifest, running =repo sync= outputs:

#+begin_example
Fetching: 100% (4/4), done in 1.142s
jax: Shared project google/jax found, disabling pruning.
jax046: Shared project google/jax found, disabling pruning.
repo sync has finished successfully.
#+end_example

From here, running diff on the two directories produces much more reasonable
output, though emacs will limit the diff to the subdirectories.

#+begin_src sh :results output file :file rocm046.diff
diff -r -x .git src/jax046 src/jaxrocm # completes with exit code 1 though
#+end_src

#+RESULTS:
[[file:rocm046.diff]]

Trying to figure out how the ROCmSoftwarePlatform forks differ from the source
projects has been a major impediment to figuring out:

+ how to write custom dockerfiles to build the libraries.
+ or even which ROCm projects are necessary for which high-level libraries.

I'm not sure whether there are better faculties for detemining what's actually
changed across remotes. Doing that over sets of commit refs in =magit= isn't
as simple as sourcetree, but doesn't work for forks AFAIK.

*** Just testing this repo workflow

This method can't be used for CI, all the remotes need to be specified in the
file and some features don't work. Still, I just want the code for reference --
I think? Why? I found [[https://github.com/google/jax/blob/main/docs/autodidax.md][autodidax.md]] _because it was local._

I'm just experimenting with different workflows here, since =git submodules= for
each thing i'm interested in is exhausting. Other options are:

+ Branches, but I have to switch each time
+ Files, but I think subject to the same limitation
+ Orphan branches but ... blech even more confusing.
+ XML Manifest Server: probably the better option.

* Issues

** The =rocm/jax-build= image lacks python with sqlite3

From here I can't rebuild python or install a new python. AFAIK the JAX branch
isn't on the system.

#+begin_example
root@kratos:/# python
Python 3.8.0 (default, May 10 2023, 04:51:38)
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import sqlite3
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
File "/pyenv/versions/3.8.0/lib/python3.8/sqlite3/__init__.py", line 23, in <module>
from sqlite3.dbapi2 import *
File "/pyenv/versions/3.8.0/lib/python3.8/sqlite3/dbapi2.py", line 27, in <module>
from _sqlite3 import *
ModuleNotFoundError: No module named '_sqlite3'
#+end_example

According to [[github:google/jax/issues/15983][google/jax#15983]], I can simply install the jaxlib.whl on top of the
=rcom/tensorflow= image

** Getting JAX to recognize the ROCm GPU device

The =rocm/tensorflow= image with =jaxlib-rocm= installed doesn't initially
recognize my ROCm device even though it shows in =tf.config.list_physical_devices()=.

#+begin_src python
import jax.numpy as jnp
from jax import config as jcfg
from jax import grad, jit, vmap
from jax import random

key = random.PRNGKey(0)

#jcfg.jax_platforms
#+end_src

The above will either: warn: =No GPU/TPU= or error with:

#+begin_example
Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig' (set JAX_PLATFORMS='' to automatically choose an available backend)
#+end_example

Tracing through the following should help. The JAX platform parameters are
initialized with flags & environment variables in  =jax/_src/config.py=.

#+begin_src python
from jax._src.lib import xla_client
from jax._src.lib import xla_bridge
from jax._src.config import flags

#FLAGS = flags.FLAGS
#FLAGS.jax_platflorm_name

xla_bridge.is_known_platform('rocm') # True
xla_client.CompileOptions()

xla_bridge.backends()
#+end_src

* Notebooks
