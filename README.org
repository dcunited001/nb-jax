#+TITLE:     Jupyter: Jax
#+AUTHOR:    David Conner
#+DESCRIPTION: notes

Not a poetry project.

* Docs

* Resources

* Code

** Repo

#+begin_src xml :tangle default.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <remote name="github" fetch="https://github.com"/>
  <default remote="github" sync-j="8" revision="refs/heads/master"/>
  <project name="google/jax" path="jax" revision="refs/heads/main" remote="github" />
  <project name="geomstats/geomstats" path="geomstats" revision="refs/heads/master" remote="github" />
</manifest>
#+end_src

Can clone with:

#+begin_src sh
WD=$(pwd)
cd src
repo init -m "$WD"

if [ $? -eq 0 ]; then
    repo sync
else
    echo "couldn't repo init" && exit 1
fi
#+end_src

I haven't tested =repo sync= from a single file, but the following script should
do it. It just can't be used for CI, all the remotes need to be specified in the
file and some features don't work. Still, I just want the code for reference --
I think? Why? I found [[https://github.com/google/jax/blob/main/docs/autodidax.md][autodidax.md]] _because it was local._

I'm just experimenting with different workflows here, since =git submodules= for
each thing i'm interested in is exhausting. Other options are:

+ Branches, but I have to switch each time
+ Files, but I think subject to the same limitation
+ Orphan branches but ... blech even more confusing.
+ XML Manifest Server: probably the better option.

* Build

 Find it on [[hub.docker.com/r/rocm/jax-build/tags][hub.docker.com/r/rocm/jax-build/tags]]

#+header: :noweb-ref jax-build-image :noweb-sep ""
#+begin_src emacs-lisp
rocm/jax-build:rocm5.5.0-jax0.4.6.550-py3.8.0
#+end_src

Pull the =rocm/jax-build= image. The =:latest= tag doesn't pull.

#+header: :tangle-mode (identity #o700) :mkdir yes :shebang #!/bin/bash
#+begin_src sh :tangle dpull.jupyter.sh :noweb yes
docker pull <<jax-build-image>>
#+end_src

** Jupyter

Image tag:

#+header: :noweb-ref jax-jupyter-img :noweb-sep ""
#+begin_src emacs-lisp
jax-jupyter-img
#+end_src

Container tag:

#+header: :noweb-ref jax-jupyter-container :noweb-sep ""
#+begin_src emacs-lisp
jax-jupyter
#+end_src

Dockerfile:

#+header: :tangle-mode (identity #o400)
#+begin_src dockerfile :tangle Dockerfile.jupyter :noweb yes
FROM <<jax-build-image>>

# tensorflow-rocm
RUN pip3 install jupyter geomstats
#+end_src

Don't run this from emacs (no wonder there's no docker-build command)

#+header: :tangle-mode (identity #o700) :mkdir yes :shebang #!/bin/bash
#+begin_src sh :tangle dbuild.sh :noweb yes
DOCKER_CONTEXT_PATH=$(pwd)
DOCKERFILE_PATH=Dockerfile.jupyter
docker build --tag <<jax-jupyter-img>> -f $DOCKERFILE_PATH $DOCKER_CONTEXT_PATH
#+end_src

And the compose environment:

#+header: :tangle-mode (identity #o400) :mkdir yes
#+begin_src sh :tangle .env.jupyter :noweb yes
HSA_OVERRIDE_GFX_VERSION=10.3.0
#+end_src

And the docker compose:

#+begin_src yaml :tangle compose-jupyter.yml :noweb yes
version: '3'
services:
  jupyter:
    image: <<jax-jupyter-img>>
    ports:
      - 8080:8888
    volumes:
      - ${PWD}/jax:/workspace/jax
      - ${PWD}/nb:/workspace/nb
#+end_src

And the launcher script:

#+header: :tangle-mode (identity #o700) :mkdir yes :shebang #!/bin/bash
#+begin_src sh :tangle dcomp.sh
# up -d $@ ... hmmmm....
# seems to be crashing unless ran specifically
docker compose --env-file=.env.jupyter -f compose-jupyter.yml
#+end_src

* Notebooks
